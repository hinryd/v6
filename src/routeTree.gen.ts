/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as McpRouteImport } from './routes/mcp'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoMcpTodosRouteImport } from './routes/demo.mcp-todos'
import { Route as ApiWakatimeRouteImport } from './routes/api.wakatime'
import { Route as ApiMcpTodosRouteImport } from './routes/api.mcp-todos'
import { Route as ApiDemoNamesRouteImport } from './routes/api.demo-names'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo.start.api-request'

const McpRoute = McpRouteImport.update({
  id: '/mcp',
  path: '/mcp',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoMcpTodosRoute = DemoMcpTodosRouteImport.update({
  id: '/demo/mcp-todos',
  path: '/demo/mcp-todos',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiWakatimeRoute = ApiWakatimeRouteImport.update({
  id: '/api/wakatime',
  path: '/api/wakatime',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiMcpTodosRoute = ApiMcpTodosRouteImport.update({
  id: '/api/mcp-todos',
  path: '/api/mcp-todos',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiDemoNamesRoute = ApiDemoNamesRouteImport.update({
  id: '/api/demo-names',
  path: '/api/demo-names',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/mcp': typeof McpRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/mcp-todos': typeof ApiMcpTodosRoute
  '/api/wakatime': typeof ApiWakatimeRoute
  '/demo/mcp-todos': typeof DemoMcpTodosRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/mcp': typeof McpRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/mcp-todos': typeof ApiMcpTodosRoute
  '/api/wakatime': typeof ApiWakatimeRoute
  '/demo/mcp-todos': typeof DemoMcpTodosRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/mcp': typeof McpRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/mcp-todos': typeof ApiMcpTodosRoute
  '/api/wakatime': typeof ApiWakatimeRoute
  '/demo/mcp-todos': typeof DemoMcpTodosRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/mcp'
    | '/api/demo-names'
    | '/api/mcp-todos'
    | '/api/wakatime'
    | '/demo/mcp-todos'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/mcp'
    | '/api/demo-names'
    | '/api/mcp-todos'
    | '/api/wakatime'
    | '/demo/mcp-todos'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  id:
    | '__root__'
    | '/'
    | '/mcp'
    | '/api/demo-names'
    | '/api/mcp-todos'
    | '/api/wakatime'
    | '/demo/mcp-todos'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  McpRoute: typeof McpRoute
  ApiDemoNamesRoute: typeof ApiDemoNamesRoute
  ApiMcpTodosRoute: typeof ApiMcpTodosRoute
  ApiWakatimeRoute: typeof ApiWakatimeRoute
  DemoMcpTodosRoute: typeof DemoMcpTodosRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/mcp': {
      id: '/mcp'
      path: '/mcp'
      fullPath: '/mcp'
      preLoaderRoute: typeof McpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/mcp-todos': {
      id: '/demo/mcp-todos'
      path: '/demo/mcp-todos'
      fullPath: '/demo/mcp-todos'
      preLoaderRoute: typeof DemoMcpTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/wakatime': {
      id: '/api/wakatime'
      path: '/api/wakatime'
      fullPath: '/api/wakatime'
      preLoaderRoute: typeof ApiWakatimeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/mcp-todos': {
      id: '/api/mcp-todos'
      path: '/api/mcp-todos'
      fullPath: '/api/mcp-todos'
      preLoaderRoute: typeof ApiMcpTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/demo-names': {
      id: '/api/demo-names'
      path: '/api/demo-names'
      fullPath: '/api/demo-names'
      preLoaderRoute: typeof ApiDemoNamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  McpRoute: McpRoute,
  ApiDemoNamesRoute: ApiDemoNamesRoute,
  ApiMcpTodosRoute: ApiMcpTodosRoute,
  ApiWakatimeRoute: ApiWakatimeRoute,
  DemoMcpTodosRoute: DemoMcpTodosRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
